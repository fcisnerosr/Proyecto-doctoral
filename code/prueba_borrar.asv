
% clc; clear all

% % Crear el dato de entrada
% SECC_registr_inctacto = table([1; 3; 2; 4], {'SECC01'; 'SECC01'; 'SECC03'; 'SECC04'}, 'VariableNames', {'UniqueName', 'SectionProperty'})
% 
% 
% 
% % Vector V
% V = [3 4 2 1]'
% 
% % Verificar la pertenencia de cada valor de UniqueName en V
% pertenece = ismember(SECC_registr_inctacto.UniqueName, V);
% 
% % Ordenar la tabla SECC_registr_inctacto según la pertenencia
% SECC_registr_inctacto_ordenado = SECC_registr_inctacto(pertenece, :)


% % Crear el dato de entrada
% SECC_registr_inctacto = table([1; 3; 2; 4], {'SECC01'; 'SECC03'; 'SECC02'; 'SECC04'}, 'VariableNames', {'UniqueName', 'SectionProperty'})
% 
% % Vector V
% V = [3 1 2 4]'
% 
% % Comparar los valores de UniqueName con V y obtener los índices resultantes
% [~, idx] = ismember(SECC_registr_inctacto.UniqueName, V);
% 
% % Reordenar la columna SectionProperty utilizando los índices
% SECC_registr_inctacto_sorted = SECC_registr_inctacto(idx, :)



% % Cell array original
% cell_array = {
%     [73]
%     [78]
%     [83]
%     [88]
%     [74]
%     [75]
%     [76]
% };
% 
% % Convertir a valores numéricos
% numeric_array = cell2mat(cell_array)

NE = 10;
no_elemento_a_danar = [1, 6];
elem_rep = zeros(length(no_elemento_a_danar),NE);

for i = 1:length(no_elemento_a_danar)
    for j = 1:NE
        elem_rep(i,j) = no_elemento_a_danar(i);
    end
end

elem_rep_fila = zeros(length(1),NE);
j = [];
% for i = 1:height(elem_rep)
%     j(i) = i;
% end

d = 'd'

for i = 1:length(elem_rep_fila) 
    for j = 1:height(elem_rep)
        if elem_rep_fila(i) == no_elemento_a_danar(j(i)) | elem_rep_fila(i) < no_elemento_a_danar(j(i))
            elem_rep_fila(i) = elem_rep(i,j)
        end
    end
end



% for i = 1:length(no_elemento_a_danar)
%     for j = 1:NE
%         if j == elem_rep(i)
%             elem_rep_fila(j) = elem_rep(i)
%         else
%             elem_rep_fila(j) = elem_rep(i)
%         end
%     end
% end


% NE = 176;
% no_elemento_a_danar = [1, 50];  % Puedes modificar estos valores según sea necesario
% 
% % Inicializar el vector de resultado
% resultado = zeros(1, NE);
% 
% % Asignar el primer valor de no_elemento_a_danar desde el inicio hasta el segundo valor de no_elemento_a_danar - 1
% resultado(1:no_elemento_a_danar(2)-1) = no_elemento_a_danar(1);
% 
% % Asignar el segundo valor de no_elemento_a_danar desde el segundo valor de no_elemento_a_danar hasta el final
% resultado(no_elemento_a_danar(2):NE) = no_elemento_a_danar(2);
% 
% % Mostrar el vector resultado
% disp(resultado);




